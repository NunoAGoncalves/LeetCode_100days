//Runtime: 1 ms, faster than 99.39% of Java online submissions for Sum of Nodes with Even-Valued Grandparent.
//Memory Usage: 48.2 MB, less than 5.15% of Java online submissions for Sum of Nodes with Even-Valued Grandparent.

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
 
class Solution {
    public int sumEvenGrandparent(TreeNode root) {
        
        int sum = 0;
        if (root.val % 2 == 0) {
            if (root.left != null && root.right != null) {
                if (root.left.left != null) {
                    sum += root.left.left.val;
                }
                if (root.right.right != null) {
                    sum += root.right.right.val;
                }
                if (root.left.right != null) {
                    sum += root.left.right.val;
                }
                if (root.right.left != null) {
                    sum += root.right.left.val;
                }
            }
            
            if (root.left != null && root.right == null) {
                if (root.left.left != null) {
                    sum += root.left.left.val;
                }
                if (root.left.right != null) {
                    sum += root.left.right.val;
                }
            }
            
            
            if (root.right != null && root.left == null) {
                if (root.right.right != null) {
                    sum += root.right.right.val;
                }
                if (root.right.left != null) {
                    sum += root.right.left.val;
                }
            }
            
        }
        
        if ((root.left != null) && (root.right != null)) {
            return sumEvenGrandparent(root.left) + sumEvenGrandparent(root.right) + sum;
        }
        if (root.left != null) {
            return sumEvenGrandparent(root.left) + sum;
        }
        if (root.right != null) {
            return sumEvenGrandparent(root.right) + sum;
        }
        
        return sum;
    }
}